const Usuario = require('../models/usuarioModel');
const bcrypt = require('bcrypt'); // 游녣 Importamos bcrypt para el hashing y la verificaci칩n
const saltRounds = 10; // 游녣 N칰mero de rondas de sal: un valor est치ndar y seguro

// ----------------------------------------------------
// FUNCI칍N: Registrar un nuevo usuario (POST) - C (Create)
// ----------------------------------------------------
exports.registrarUsuario = (req, res) => {
    const datos = req.body;

    // 1. Validaci칩n de contrase침as
    if (datos.contrase침a !== datos.confirmar) {
        return res.status(400).json({ error: 'Las contrase침as no coinciden' });
    }

    // 2. HASHEAR la contrase침a antes de llamar al modelo
    // Esto es AS칈NCRONO, por lo que usamos bcrypt.hash()
    bcrypt.hash(datos.contrase침a, saltRounds, (err, hash) => {
        if (err) {
            console.error('Error al hashear la contrase침a:', err);
            return res.status(500).json({ error: 'Error interno de servidor al encriptar.' });
        }
        
        // Sobreescribimos la contrase침a en texto plano por su versi칩n hasheada
        datos.contrase침a = hash;
        
        // 3. Llama al modelo para insertar en la DB
        Usuario.registrar(datos, (err, resultado) => {
            if (err) {
                // Manejo de errores de la DB (ej. correo duplicado, c칠dula duplicada)
                console.error('Error al registrar usuario:', err);
                // Aqu칤 podr칤as examinar el error.code para dar un mensaje m치s espec칤fico si es de duplicidad
                return res.status(500).json({ error: 'Error en el servidor al registrar.' });
            }
            res.status(200).json({ mensaje: 'Usuario registrado correctamente', id: resultado.insertId });
        });
    });
};

// ----------------------------------------------------
// FUNCI칍N: Iniciar sesi칩n (POST)
// ----------------------------------------------------
exports.iniciarSesion = (req, res) => {
    const { correo, contrase침a } = req.body;

    // 1. Buscar el usuario por correo
    Usuario.obtenerPorCorreo(correo, (err, resultados) => {
        if (err) {
            console.error('Error al buscar usuario por correo:', err);
            return res.status(500).json({ error: 'Error interno del servidor.' });
        }

        if (resultados.length === 0) {
            // No se encontr칩 el usuario
            return res.status(401).json({ error: 'Credenciales inv치lidas (correo o contrase침a).' });
        }

        const usuario = resultados[0];
        
        // 2. Comparar la contrase침a ingresada con la hasheada en la DB
        bcrypt.compare(contrase침a, usuario.contrase침a, (err, coinciden) => {
            if (err) {
                console.error('Error al comparar contrase침as:', err);
                return res.status(500).json({ error: 'Error interno del servidor.' });
            }

            if (coinciden) {
                // Contrase침a correcta: 춰Inicio de sesi칩n exitoso!
                // *Nota: Aqu칤 se implementar칤a la generaci칩n de un token JWT.*
                const usuarioInfo = { id: usuario.id, nombre: usuario.nombre, correo: usuario.correo };
                res.status(200).json({ mensaje: 'Inicio de sesi칩n exitoso', usuario: usuarioInfo });
            } else {
                // Contrase침a incorrecta
                res.status(401).json({ error: 'Credenciales inv치lidas (correo o contrase침a).' });
            }
        });
    });
};

// ----------------------------------------------------
// FUNCI칍N: Obtener todos los usuarios (GET) - R (Read/All)
// ----------------------------------------------------
exports.obtenerUsuarios = (req, res) => {
    // Llama a una funci칩n en el modelo para ejecutar un SELECT *
    Usuario.obtenerTodos((err, resultados) => {
        if (err) {
            console.error('Error al obtener usuarios:', err);
            return res.status(500).json({ error: 'Error en el servidor al obtener usuarios.' });
        }
        
        // Si no hay errores, retorna el c칩digo 200 (OK) y la lista de resultados
        // Es buena pr치ctica no devolver el hash de la contrase침a.
        const usuariosSinContrase침a = resultados.map(u => {
            const { contrase침a, ...usuarioSinPass } = u;
            return usuarioSinPass;
        });
        res.status(200).json(usuariosSinContrase침a);
    });
};

// ----------------------------------------------------
// FUNCI칍N: Obtener un usuario por ID (GET/:id) - R (Read/One)
// ----------------------------------------------------
exports.obtenerUsuarioPorId = (req, res) => {
    const id = req.params.id;
    
    // Llama a una funci칩n en el modelo para ejecutar un SELECT por ID
    Usuario.obtenerPorId(id, (err, resultados) => {
        if (err) {
            console.error(`Error al obtener usuario con ID ${id}:`, err);
            return res.status(500).json({ error: 'Error en el servidor al obtener el usuario.' });
        }

        if (resultados.length === 0) {
            return res.status(404).json({ error: 'Usuario no encontrado.' });
        }
        
        // Si no hay errores, retorna el c칩digo 200 (OK) y el resultado
        const usuario = resultados[0];
        // Quita la contrase침a antes de responder
        const { contrase침a, ...usuarioSinPass } = usuario;
        res.status(200).json(usuarioSinPass);
    });
};

// ----------------------------------------------------
// FUNCI칍N: Actualizar un usuario por ID (PUT/:id) - U (Update)
// ----------------------------------------------------
exports.actualizarUsuario = (req, res) => {
    const id = req.params.id;
    const datos = req.body;
    
    // Si la contrase침a est치 en los datos, 춰DEBE hashearse antes de la actualizaci칩n!
    if (datos.contrase침a) {
        // Validaci칩n de contrase침as
        if (datos.contrase침a !== datos.confirmar) {
            return res.status(400).json({ error: 'Las contrase침as no coinciden' });
        }

        // Hashear la nueva contrase침a
        bcrypt.hash(datos.contrase침a, saltRounds, (err, hash) => {
            if (err) {
                console.error('Error al hashear la nueva contrase침a:', err);
                return res.status(500).json({ error: 'Error interno de servidor al encriptar la nueva contrase침a.' });
            }
            
            datos.contrase침a = hash;
            // Eliminar 'confirmar' del objeto para que no se intente guardar en la DB
            delete datos.confirmar; 
            
            // Llamar al modelo con la contrase침a hasheada
            Usuario.actualizar(id, datos, manejarResultadoActualizacion(res));
        });
    } else {
        // Si la contrase침a no est치 en los datos, actualiza directamente
        // Asegurarse de eliminar 'confirmar' por si acaso
        delete datos.confirmar; 
        Usuario.actualizar(id, datos, manejarResultadoActualizacion(res));
    }
};

// Funci칩n de utilidad para manejar la respuesta de la actualizaci칩n
const manejarResultadoActualizacion = (res) => (err, resultado) => {
    if (err) {
        console.error('Error al actualizar usuario:', err);
        return res.status(500).json({ error: 'Error en el servidor al actualizar.' });
    }

    if (resultado.affectedRows === 0) {
        return res.status(404).json({ error: 'Usuario no encontrado o no se realizaron cambios.' });
    }

    res.status(200).json({ mensaje: 'Usuario actualizado correctamente' });
};


// ----------------------------------------------------
// FUNCI칍N: Eliminar un usuario por ID (DELETE/:id) - D (Delete)
// ----------------------------------------------------
exports.eliminarUsuario = (req, res) => {
    const id = req.params.id;
    
    // Llama a una funci칩n en el modelo para ejecutar un DELETE
    Usuario.eliminar(id, (err, resultado) => {
        if (err) {
            console.error(`Error al eliminar usuario con ID ${id}:`, err);
            return res.status(500).json({ error: 'Error en el servidor al intentar eliminar.' });
        }

        if (resultado.affectedRows === 0) {
            return res.status(404).json({ error: 'Usuario no encontrado para eliminar.' });
        }

        res.status(200).json({ mensaje: 'Usuario eliminado correctamente' });
    });
};

// Nota: Estas funciones asumen que el archivo `../models/usuarioModel` tiene implementadas las funciones 
// `registrar`, `obtenerTodos`, `obtenerPorCorreo`, `obtenerPorId`, `actualizar` y `eliminar` que interact칰an con la base de datos.